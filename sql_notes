>>> A view is a stored SQL statement.it acts like a table but 
doesn't have the data stored on the disk, whearas Materialized 
view acts as a table having the data stored on the disk.


>>> generally its better to use access data through views rather
than the actual tables of the DB, sometimes the DB admin wants
to change a column name of a certain table, rather than changing 
it, and telling the developers, data engineers etc. to make the
same change, he can create a view, asign the same column on the 
view to the new column name and voila. no need to tell everyone 
about the change.


>>> the difference between truncate and delete is that if we're 
using for example an autoincrement column like id column, if you 
insert a new row it will take the last value + 1 if you used the 
delete statment, while truncate initialize the counter to 1.


>>> INDEXES: 
1- CLUSTERED Index : it orders the rows data inside the data pages
for example if we create an index on FIRST_NAME column, the rows 
will be ordered alphabeticaly based on the FIRST_NAME.


>>> TRANSACTION
In a database context, a transaction is every statment that update
the data inside the database, it could be an INSERT statment, UPDATE
or DELETE statment etc.


>>> BUFFER POOL 
is the place in the RAM where MySQL loads data pages for handling 
transactions



>>> Atomicity

    All changes to data are performed as if they are a single operation. That is, all the changes are performed,
    or none of them are.For example, in an application that transfers funds from one account to another, 
    the atomicity property ensures that, if a debit is made successfully from one account, the corresponding 
    credit is made to the other account.

>>> Consistency

    Data is in a consistent state when a transaction starts and when it ends.
    For example, in an application that transfers funds from one account to another,
    the consistency property ensures that the total value of funds in both the accounts
    is the same at the start and end of each transaction.

>>> Isolation

    The intermediate state of a transaction is invisible to other transactions. As a result, transactions
    that run concurrently appear to be serialized. For example, in an application that transfers funds from
    one account to another, the isolation property ensures that another transaction sees the transferred 
    funds in one account or the other, but not in both, nor in neither.

>>> Durability

    After a transaction successfully completes, changes to data persist and are not undone, even in the event
    of a system failure.For example, in an application that transfers funds from one account to another, 
    the durability property ensures that the changes made to each account will not be reversed. 